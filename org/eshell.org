:PROPERTIES:
:ID:       77550a15-8c6e-40e0-9930-d97c043a9de1
:END:
# SPDX-FileCopyrightText: 2025 László Vaskó <vlaci@fastmail.com>
#
# SPDX-License-Identifier: EUPL-1.2
#+title: Eshell

Eshell is one of the many shells (not really terminal emulators) of
Emacs. It's main appeal is that one can use regular emacs commands or
elisp code from it seamlessly.

#+begin_src emacs-lisp :noweb-ref init-el
(setup eshell
  (setq eshell-aliases-file (vlaci/in-init-directory "eshell/alias")
        eshell-visual-options '("git" "--help" "--paginate")
        eshell-visual-subcommands '("git" "log" "diff" "show")
        eshell-prompt-function #'vl/esh-prompt-func)
  (:hook (defun vl/set-eshell-term-h ()
           (setenv "TERM" "xterm-256color")))
  (:when-loaded
    (defun vl/eshell-pick-history ()
      "Show Eshell history in a completing-read picker and insert the selected command."
      (interactive)
      (let* ((history-file (expand-file-name "eshell/history" user-emacs-directory))
             (history-entries (when (file-exists-p history-file)
                                (with-temp-buffer
                                  (insert-file-contents history-file)
                                  (split-string (buffer-string) "\n" t))))
             (selection (completing-read "Eshell History: " history-entries)))
        (when selection
          (insert selection))))

    (add-hook 'eshell-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c l") #'vl/eshell-pick-history)
                (local-set-key (kbd "C-l")
                               (lambda ()
                                 (interactive)
                                 (eshell/clear 1)
                                 (eshell-send-input)))))))
#+end_src

#+begin_src nix :noweb-ref emacs-packages
eshell-syntax-highlighting esh-help bash-completion
#+end_src

#+begin_src emacs-lisp :noweb-ref init-el
(setup (:package eshell-syntax-highlighting)
  (:hook-into eshell-mode-hook))

(setup (:package esh-help)
  (:with-feature eshell
    (:when-loaded
      (setup-esh-help-eldoc))))
#+end_src

#+begin_src text :tangle out/emacs.d/eshell/alias :mkdirp yes
alias ff find-file $1
alias  d dired     $1
#+end_src

* Prompt

The prompt system is adapted from an article in Modern Emacs[cite:@kaschalk_eric_making_2017]

#+begin_src emacs-lisp :noweb-ref init-el
(require 'dash)
(require 's)

(defvar vl/esh-sep " | ")
(defvar vl/esh-section-delim " ")
(defvar vl/esh-header "")
(defvar vl/eshell-funcs nil)

(setq eshell-prompt-regexp "❯ ")
(setq eshell-prompt-string "❯ ")

(defmacro vl/with-face (STR &rest PROPS)
  "Return STR propertized with PROPS."
  `(propertize ,STR 'face (list ,@PROPS)))

(defmacro vl/esh-section (NAME ICON FORM &rest PROPS)
  "Build eshell section NAME with ICON prepended to evaled FORM with PROPS."
  `(setq ,NAME
         (lambda () (when ,FORM
                      (-> ,ICON
                          (concat vl/esh-section-delim ,FORM)
                          (vl/with-face ,@PROPS))))))

(defun vl/esh-acc (acc x)
  "Accumulator for evaluating and concatenating esh-sections."
  (--if-let (funcall x)
      (if (s-blank? acc)
          it
        (concat acc vl/esh-sep it))
    acc))

(defun vl/esh-prompt-func ()
  "Build `eshell-prompt-function'"
  (concat vl/esh-header
          (-reduce-from 'vl/esh-acc "" vl/eshell-funcs)
          "\n"
          eshell-prompt-string))

(defvar vl/max-prefix-len 3)

(defun find-minimal-unique-prefix (target entries)
  "Find the shortest prefix of TARGET that uniquely identifies it in ENTRIES."
  (catch 'found
    (dotimes (len (min vl/max-prefix-len (length target)))
      (let ((prefix (substring target 0 (1+ len)))
            (count 0))
        (dolist (entry entries)
          (when (string-prefix-p prefix entry)
            (cl-incf count)))
        (when (= count 1)
          (throw 'found prefix))))
    target))

(defun vl/truncate-path-to-unique-completion (path)
  "Truncate PATH's directory components to shortest uniquely tab-completable segments, preserving ~ abbreviation."
  (let* ((abs-path (expand-file-name path))
         (dir-part (file-name-directory abs-path))
         (file-part (file-name-nondirectory abs-path))
         (home-dir (expand-file-name "~/"))
         (in-home (file-in-directory-p dir-part home-dir))
         (base-dir (if in-home home-dir "/"))
         (rel-dir (file-relative-name dir-part base-dir))
         (components (split-string rel-dir "/" t))
         (current-dir base-dir)
         (result '()))

    (dolist (comp components)
      (let* ((entries (directory-files current-dir nil "^[^.]"))
             (entries (delete "." (delete ".." entries)))
             (prefix (find-minimal-unique-prefix comp entries)))
        (push prefix result)
        (setq current-dir (expand-file-name comp current-dir))))

    (concat
     (cond
      (in-home
       (if (null components)
           "~/"
         (concat "~/" (mapconcat 'identity (nreverse result) "/") "/")))
      ((null components) "/")
      (t (concat "/" (mapconcat 'identity (nreverse result) "/") "/")))
     file-part)))

(vl/esh-section esh-dir
                (nerd-icons-faicon "nf-fa-folder_open_o")
                (vl/truncate-path-to-unique-completion (abbreviate-file-name (eshell/pwd)))
                '(:foreground "MediumPurple4" :weight ultra-bold :underline t))

(vl/esh-section esh-git
                (nerd-icons-faicon "nf-fa-git")
                (magit-get-current-branch)
                '(:foreground "green"))

(vl/esh-section esh-nix
                (nerd-icons-devicon "nf-dev-nixos")
                (getenv "IN_NIX_SHELL")
                '(:foreground "dark blue"))

(vl/esh-section esh-exit-code
                (nerd-icons-faicon "nf-fa-warning")
                (let ((rc eshell-last-command-status))
                  (when (not (eq rc 0)) (number-to-string rc)))
                '(:foreground "dark red"))

;; Choose which eshell-funcs to enable
(setq vl/eshell-funcs (list esh-dir esh-nix esh-git esh-exit-code))

(defun vl/delete-previous-eshell-prompt-segments ()
  "Delete previous prompts segments."
  (save-excursion
    (let ((inhibit-read-only t)) ; Allow modifications to read-only text
      (forward-line -1)
      (delete-line))))

(add-hook 'eshell-pre-command-hook #'vl/delete-previous-eshell-prompt-segments)

#+end_src

* Commands
** Bat-like syntax highlighting for cat

It is lifted from =aweshell.el=[cite:@stewart_andy_manateelazycat_aweshellaweshell_2018]

#+begin_src emacs-lisp :noweb-ref init-el
(define-advice eshell/cat (:override (filename) vl/eshell-cat-a)
  "Like cat(1) but with syntax highlighting."
  (let ((existing-buffer (get-file-buffer filename))
        (buffer (find-file-noselect filename)))
    (eshell-print
     (with-current-buffer buffer
       (if (fboundp 'font-lock-ensure)
           (font-lock-ensure)
         (with-no-warnings
           (font-lock-fontify-buffer)))
       (let ((contents (buffer-string)))
         (remove-text-properties 0 (length contents) '(read-only nil) contents)
         contents)))
    (unless existing-buffer
      (kill-buffer buffer))
    nil))
#+end_src

#+print_bibliography:
