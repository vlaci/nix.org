:PROPERTIES:
:ID:       c7aa889e-b7aa-483d-9363-3898169590a5
:END:
# SPDX-FileCopyrightText: 2024 László Vaskó <vlaci@fastmail.com>
#
# SPDX-License-Identifier: EUPL-1.2

#+FILETAGS: :Shell:Zsh:
#+title: Zsh

I am using =ZSH=[fn:zsh] as my default shell. It is POSIX compliant
and it is easy to customize. See [[id:c7dbcd8d-1aec-406c-a200-1d43b992d84e][Zsh Prompt]] for my =Powerlevel10k= prompt configuration.

#+caption: nixos
#+begin_src nix :noweb-ref nixos-modules :prologue "(" :epilogue ")"
{ pkgs, ... }:

{
  programs.zsh = {
    enable = true;
  };

  users.defaultUserShell = pkgs.zsh;
}
#+end_src

#+caption: home-manager
#+begin_src nix :noweb-ref home-manager-modules :prologue "(" :epilogue ")"
{
  nixosConfig,
  config,
  pkgs,
  ...
}:

{
  programs.zsh = {
    enable = true;
    enableVteIntegration = true;
    autosuggestion.enable = true;
    autocd = true;
    dotDir = ".config/zsh";
    plugins = [
      {
        name = "fast-syntax-highlighting";
        src = "${pkgs.zsh-fast-syntax-highlighting}/share/zsh/site-functions";
      }
    ];
  };

  home.packages = with pkgs; [
    meslo-lgs-nf
  ];
}
#+end_src

History handling needs some customization as well[fn:atuin]:

#+begin_src nix :noweb-ref home-manager-modules :prologue "(" :epilogue ")"
{ nixosConfig, config, ... }:

{
    programs.zsh.history = {
      append = true;
      expireDuplicatesFirst = true;
      extended = true;
      save = 100000;
      size = 100000;
      # we write the history immediately to our persistence directory
      path = "${nixosConfig._.persist.root}${config.home.homeDirectory}/${config.programs.zsh.dotDir}/.zsh_history";
    };
}
#+end_src


The following configuration are from GRML's ZSH config[fn:grml]:

#+begin_src nix :noweb-ref home-manager-modules
{
  programs.zsh.initExtra = ''
    # in order to use #, ~ and ^ for filename generation grep word
    # *~(*.gz|*.bz|*.bz2|*.zip|*.Z) -> searches for word not in compressed files
    # don't forget to quote '^', '~' and '#'!
    setopt extendedglob

    # display PID when suspending processes as well
    setopt longlistjobs

    # report the status of backgrounds jobs immediately
    setopt notify

    # whenever a command completion is attempted, make sure the entire command path
    # is hashed first.
    setopt hash_list_all

    # not just at the end
    setopt completeinword

    # Don't send SIGHUP to background processes when the shell exits.
    setopt nohup

    # make cd push the old directory onto the directory stack.
    setopt auto_pushd

    # avoid "beep"ing
    setopt nobeep

    # don't push the same dir twice.
    setopt pushd_ignore_dups

    # * shouldn't match dotfiles. ever.
    setopt noglobdots

    # use zsh style word splitting
    setopt noshwordsplit

    # don't error out when unset parameters are used
    setopt unset

    # allow one error for every three characters typed in approximate completer
    zstyle ':completion:*:approximate:'    max-errors 'reply=( $((($#PREFIX+$#SUFFIX)/3 )) numeric )'

    # don't complete backup files as executables
    zstyle ':completion:*:complete:-command-::commands' ignored-patterns '(aptitude-*|*\~)'

    # start menu completion only if it could find no unambiguous initial string
    zstyle ':completion:*:correct:*'       insert-unambiguous true
    zstyle ':completion:*:corrections'     format $'%{\e[0;31m%}%d (errors: %e)%{\e[0m%}'
    zstyle ':completion:*:correct:*'       original true

    # activate color-completion
    zstyle ':completion:*:default'         list-colors ''${(s.:.)LS_COLORS}

    # format on completion
    zstyle ':completion:*:descriptions'    format $'%{\e[0;31m%}completing %B%d%b%{\e[0m%}'

    # automatically complete 'cd -<tab>' and 'cd -<ctrl-d>' with menu
    # zstyle ':completion:*:*:cd:*:directory-stack' menu yes select

    # insert all expansions for expand completer
    zstyle ':completion:*:expand:*'        tag-order all-expansions
    zstyle ':completion:*:history-words'   list false

    # activate menu
    zstyle ':completion:*:history-words'   menu yes

    # ignore duplicate entries
    zstyle ':completion:*:history-words'   remove-all-dups yes
    zstyle ':completion:*:history-words'   stop yes

    # match uppercase from lowercase
    zstyle ':completion:*'                 matcher-list 'm:{a-z}={A-Z}'

    # separate matches into groups
    zstyle ':completion:*:matches'         group 'yes'
    zstyle ':completion:*'                 group-name ""

    # if there are more than 5 options allow selecting from a menu
    zstyle ':completion:*'                 menu select=5

    zstyle ':completion:*:messages'        format '%d'
    zstyle ':completion:*:options'         auto-description '%d'

    # describe options in full
    zstyle ':completion:*:options'         description 'yes'

    # on processes completion complete all user processes
    zstyle ':completion:*:processes'       command 'ps -au$USER'

    # offer indexes before parameters in subscripts
    zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

    # provide verbose completion information
    zstyle ':completion:*'                 verbose true

    # recent (as of Dec 2007) zsh versions are able to provide descriptions
    # for commands (read: 1st word in the line) that it will list for the user
    # to choose from. The following disables that, because it's not exactly fast.
    zstyle ':completion:*:-command-:*:'    verbose false

    # set format for warnings
    zstyle ':completion:*:warnings'        format $'%{\e[0;31m%}No matches for:%{\e[0m%} %d'

    # define files to ignore for zcompile
    zstyle ':completion:*:*:zcompile:*'    ignored-patterns '(*~|*.zwc)'
    zstyle ':completion:correct:'          prompt 'correct to: %e'

    # Ignore completion functions for commands you don't have:
    zstyle ':completion::(^approximate*):*:functions' ignored-patterns '_*'

    # Provide more processes in completion of programs like killall:
    zstyle ':completion:*:processes-names' command 'ps c -u ''${USER} -o command | sort -u'

    # complete manual by their section
    zstyle ':completion:*:manuals'    separate-sections true
    zstyle ':completion:*:manuals.*'  insert-sections   true
    zstyle ':completion:*:man:*'      menu yes select

    function bind2maps () {
        local i sequence widget
        local -a maps

        while [[ "$1" != "--" ]]; do
            maps+=( "$1" )
            shift
        done
        shift

        if [[ "$1" == "-s" ]]; then
            shift
            sequence="$1"
        else
            sequence="''${key[$1]}"
        fi
        widget="$2"

        [[ -z "$sequence" ]] && return 1

        for i in "''${maps[@]}"; do
            bindkey -M "$i" "$sequence" "$widget"
        done
    }

    typeset -A key
    key=(
        Home     "''${terminfo[khome]}"
        End      "''${terminfo[kend]}"
        Insert   "''${terminfo[kich1]}"
        Delete   "''${terminfo[kdch1]}"
        Up       "''${terminfo[kcuu1]}"
        Down     "''${terminfo[kcud1]}"
        Left     "''${terminfo[kcub1]}"
        Right    "''${terminfo[kcuf1]}"
        PageUp   "''${terminfo[kpp]}"
        PageDown "''${terminfo[knp]}"
        BackTab  "''${terminfo[kcbt]}"
    )

    # Guidelines for adding key bindings:
    #
    #   - Do not add hardcoded escape sequences, to enable non standard key
    #     combinations such as Ctrl-Meta-Left-Cursor. They are not easily portable.
    #
    #   - Adding Ctrl characters, such as '^b' is okay; note that '^b' and '^B' are
    #     the same key.
    #
    #   - All keys from the $key[] mapping are obviously okay.
    #
    #   - Most terminals send "ESC x" when Meta-x is pressed. Thus, sequences like
    #     '\ex' are allowed in here as well.

    bind2maps emacs             -- Home   beginning-of-somewhere
    bind2maps       viins vicmd -- Home   vi-beginning-of-line
    bind2maps emacs             -- End    end-of-somewhere
    bind2maps       viins vicmd -- End    vi-end-of-line
    bind2maps emacs viins       -- Insert overwrite-mode
    bind2maps             vicmd -- Insert vi-insert
    bind2maps emacs             -- Delete delete-char
    bind2maps       viins vicmd -- Delete vi-delete-char
    bind2maps emacs viins vicmd -- Up     up-line-or-search
    bind2maps emacs viins vicmd -- Down   down-line-or-search
    bind2maps emacs             -- Left   backward-char
    bind2maps       viins vicmd -- Left   vi-backward-char
    bind2maps emacs             -- Right  forward-char
    bind2maps       viins vicmd -- Right  vi-forward-char
    #k# Perform abbreviation expansion
    bind2maps emacs viins       -- -s '^x.' zleiab
    #k# Display list of abbreviations that would expand
    bind2maps emacs viins       -- -s '^xb' help-show-abk
    #k# mkdir -p <dir> from string under cursor or marked area
    bind2maps emacs viins       -- -s '^xM' inplaceMkDirs
    #k# display help for keybindings and ZLE
    bind2maps emacs viins       -- -s '^xz' help-zle
    #k# Insert files and test globbing
    bind2maps emacs viins       -- -s "^xf" insert-files
    #k# Edit the current line in \kbd{\$EDITOR}
    bind2maps emacs viins       -- -s '\ee' edit-command-line
    #k# search history backward for entry beginning with typed text
    bind2maps emacs viins       -- -s '^xp' history-beginning-search-backward-end
    #k# search history forward for entry beginning with typed text
    bind2maps emacs viins       -- -s '^xP' history-beginning-search-forward-end
    #k# search history backward for entry beginning with typed text
    bind2maps emacs viins       -- PageUp history-beginning-search-backward-end
    #k# search history forward for entry beginning with typed text
    bind2maps emacs viins       -- PageDown history-beginning-search-forward-end
    bind2maps emacs viins       -- -s "^x^h" commit-to-history
    #k# Kill left-side word or everything up to next slash
    bind2maps emacs viins       -- -s '\ev' slash-backward-kill-word
    #k# Kill left-side word or everything up to next slash
    bind2maps emacs viins       -- -s '\e^h' slash-backward-kill-word
    #k# Kill left-side word or everything up to next slash
    bind2maps emacs viins       -- -s '\e^?' slash-backward-kill-word
    # Do history expansion on space:
    bind2maps emacs viins       -- -s ' ' magic-space
    #k# Trigger menu-complete
    bind2maps emacs viins       -- -s '\ei' menu-complete  # menu completion via esc-i
    #k# Insert a timestamp on the command line (yyyy-mm-dd)
    bind2maps emacs viins       -- -s '^xd' insert-datestamp
    #k# Insert last typed word
    bind2maps emacs viins       -- -s "\em" insert-last-typed-word
    #k# A smart shortcut for \kbd{fg<enter>}
    bind2maps emacs viins       -- -s '^z' grml-zsh-fg
    #k# prepend the current command with "sudo"
    bind2maps emacs viins       -- -s "^os" sudo-command-line
    #k# jump to after first word (for adding options)
    bind2maps emacs viins       -- -s '^x1' jump_after_first_word
    #k# complete word from history with menu
    bind2maps emacs viins       -- -s "^x^x" hist-complete

    zmodload -i zsh/complist
    #m# k Shift-tab Perform backwards menu completion
    bind2maps menuselect -- BackTab reverse-menu-complete

    #k# menu selection: pick item but stay in the menu
    bind2maps menuselect -- -s '\e^M' accept-and-menu-complete
    # also use + and INSERT since it's easier to press repeatedly
    bind2maps menuselect -- -s '+' accept-and-menu-complete
    bind2maps menuselect -- Insert accept-and-menu-complete

    # accept a completion and try to complete again by using menu
    # completion; very useful with completing directories
    # by using 'undo' one's got a simple file browser
    bind2maps menuselect -- -s '^o' accept-and-infer-next-history

    bind2maps emacs viins vicmd -- -s '\e[1;5C' forward-word
    bind2maps emacs viins vicmd -- -s '\e[1;5D' backward-word
  '';
}
#+end_src

#+begin_src nix :noweb-ref home-manager-modules
{
  programs.zsh.initExtra = ''
    go-up () {
      cd ..
      _p9k_on_widget_send-break
    }; zle -N go-up

    bindkey '^[u' go-up
  '';
}
#+end_src

* Footnotes

[fn:zsh] I like [[https://www.zsh.org][Z-Shell]], because it is mostly Bash compatible while providing many quality of life improvements.
Having to learn a new language just for interactive usage only was the one off-putting thing for Fish for me. (For now at least.)
[fn:atuin] Look at [[id:8bf3730b-bd56-4647-9ce5-4a3498582f54][Atuin]] for a more comfortable way to search in your shell history.
[fn:grml] An interactive live-CD with nifty ZSH config https://grml.org/zsh/
