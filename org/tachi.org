:PROPERTIES:
:ID:       736597cf-9cc1-4f82-bed8-8d26a5484b38
:END:
# SPDX-FileCopyrightText: 2024 László Vaskó <vlaci@fastmail.com>
#
# SPDX-License-Identifier: EUPL-1.2
#+title: Tachi

This is the configuration for my work notebook. Similarly to my [[id:36073d96-d95e-4bd5-ab4b-2abb6c3ca27a][home
desktop]], it is named after a ship in the tv show, Expanse.

#+caption: flake.nix:outputs
#+begin_src nix :noweb no-export :noweb-ref flake-outputs
nixosModules.tachi = {
  networking.hostName = "tachi";
  imports = [
    <<tachi-modules>>
  ];
};
nixosConfigurations.tachi = self.lib.mkNixOS {
  modules = [ self.nixosModules.tachi ];
};
#+end_src

Hardware configuration generated using =nixos-generate-config=:

#+NAME: tachi-hardware-configuration
#+begin_src emacs-lisp :eval yes :results raw
(let ((out (shell-command-to-string
            (concat "2>/dev/null "
                    "nixos-generate-config --no-filesystems --show-hardware-config"
                    "| nixfmt"))))
  (concat "#+caption: hosts/tachi/hardware-configuration.nix\n"
          "#+begin_src nix :mkdirp yes :tangle out/hosts/tachi/hardware-configuration.nix\n"
          out
          "#+end_src"))
#+end_src

#+RESULTS: tachi-hardware-configuration
#+caption: hosts/tachi/hardware-configuration.nix
#+begin_src nix :mkdirp yes :tangle out/hosts/tachi/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "nvme"
    "usbhid"
    "usb_storage"
    "sd_mod"
    "rtsx_pci_sdmmc"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s31f6.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;
  # networking.interfaces.wwan0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

#+caption: hosts/razorback/disko-config.nix
#+begin_src nix :tangle out/hosts/tachi/disko-config.nix :mkdirp yes
{
  disko.devices = {
    disk = {
      nvme = {
        type = "disk";
        device = "/dev/nvme0n1";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              size = "1G";
              type = "EF00";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
                mountOptions = [
                  "umask=0077"
                ];
              };
            };
            luks = {
              size = "100%";
              content = {
                type = "luks";
                name = "crypt-root";
                extraOpenArgs = [ "--allow-discards" ];
                content = {
                  type = "lvm_pv";
                  vg = "mainpool";
                };
              };
            };
          };
        };
      };
    };
    lvm_vg = {
      mainpool = {
        type = "lvm_vg";
        lvs = {
          thinpool = {
            size = "128G";
            lvm_type = "thin-pool";
          };
          swap = {
            size = "48G";
            content = {
              type = "swap";
            };
          };
          root = {
            size = "64G";
            lvm_type = "thinlv";
            pool = "thinpool";
            content = {
              type = "filesystem";
              format = "xfs";
              mountpoint = "/";
              mountOptions = [ "defaults" ];
              postCreateHook = "lvcreate -s mainpool/root --name root-blank";
            };
          };
          nix = {
            size = "128G";
            content = {
              type = "filesystem";
              format = "xfs";
              mountpoint = "/nix";
              mountOptions = [ "defaults" ];
            };
          };
          persist = {
            size = "512G";
            content = {
              type = "filesystem";
              format = "xfs";
              mountpoint = "/persist";
              mountOptions = [ "defaults" ];
             };
          };
        };
      };
    };
  };
}
#+end_src

#+caption: nixos/tachi
#+begin_src nix :noweb no-export :noweb-ref tachi-modules
./hosts/tachi/disko-config.nix
#+end_src

#+caption: nixos/tachi
#+begin_src nix :noweb no-export :noweb-ref tachi-modules :prologue "(" :epilogue ")"
{
  lib,
  pkgs,
  config,
  ...
}:

{
  boot.initrd.systemd = {
    enable = true;
    emergencyAccess = true;
    services.revert-root = {
      after = [
        "cryptsetup.target"
        "systemd-udev-settle.service"
        "systemd-modules-load.service"
      ];
      wants = ["systemd-udev-settle.service"];
      before = [
        "sysroot.mount"
      ];
      wantedBy = [ "initrd.target" ];
      path = with pkgs; [
        lvm2
      ];
      unitConfig = {
        DefaultDependencies = "no";
        ConditionKernelCommandLine = [ "!no_rollback" ];
      };
      serviceConfig.Type = "oneshot";

      script = ''
        lvconvert --mergethin mainpool/root-blank || true
        lvcreate -s mainpool/root --name root-blank
      '';
    };

    services.create-needed-for-boot-dirs = {
      after = lib.mkForce [ "revert-root.service" ];
    };
  };
}
#+End_src


#+caption: nixos/tachi
#+begin_src nix :noweb no-export :noweb-ref tachi-modules
{
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
}
#+end_src 

#+caption: nixos/tachi
#+begin_src nix :noweb-ref tachi-modules
{
  networking.networkmanager.enable = true;
  _.persist.directories = [ "/etc/NetworkManager/system-connections" ];
}
#+end_src

#+caption: nixos/tachi
#+begin_src nix :noweb-ref tachi-modules
{
  boot.tmp = {
    useTmpfs = true;
    tmpfsSize = "100%";
  };
  boot.binfmt.emulatedSystems = [ "aarch64-linux" ];

  system.stateVersion = "24.11";
}
#+end_src

#+begin_src nix :noweb-ref tachi-modules :prologue "(" :epilogue ")"
{ pkgs, ... }:

{
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
    extraPackages = [ pkgs.openssh ];
  };
  environment.systemPackages = with pkgs; [
    docker-compose
  ];

  _.persist.users.vlaci.files = [ ".docker/config.json" ];
}
#+end_src
